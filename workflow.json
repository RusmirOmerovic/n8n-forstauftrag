{
  "name": "forstauftrag",
  "nodes": [
    {
      "parameters": {
        "mode": "jsonToBinary",
        "convertAllData": false,
        "sourceKey": "html",
        "destinationKey": "files",
        "options": {
          "encoding": "utf8",
          "fileName": "index.html",
          "mimeType": "text/html; charset=utf-8",
          "useRawData": true
        }
      },
      "type": "n8n-nodes-base.moveBinaryData",
      "typeVersion": 1.1,
      "position": [
        -1152,
        -96
      ],
      "id": "dcd9be87-d2ed-48f2-9bfd-7e27c9372639",
      "name": "Move Binary Data (HTML file)"
    },
    {
      "parameters": {
        "formFields": {
          "values": [
            {
              "fieldLabel": "Verkehrsrechtliche Anordnung/Einsatz an Straße",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "ja"
                  },
                  {
                    "option": "nein"
                  }
                ]
              }
            },
            {
              "fieldLabel": "Absperrung",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "keine"
                  },
                  {
                    "option": "ja - Vollsperrung mit Schilder und Absperrband"
                  }
                ]
              }
            },
            {
              "fieldLabel": "Posten - wie viele Helfer? ",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "0 - keine notwendig"
                  },
                  {
                    "option": "1"
                  },
                  {
                    "option": "2"
                  },
                  {
                    "option": "3"
                  },
                  {
                    "option": "4"
                  },
                  {
                    "option": "5"
                  },
                  {
                    "option": "mehr als 5 "
                  }
                ]
              }
            },
            {
              "fieldLabel": "Persönliche Schutzausrüstung geprüft/getragen? ",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "ja"
                  },
                  {
                    "option": "nein"
                  }
                ]
              }
            },
            {
              "fieldLabel": "Bemerkungen zu Schutzausrüstung: ",
              "fieldType": "textarea",
              "placeholder": "Besonderheiten bei Schutzausrüstung, falls vorhanden. "
            },
            {
              "fieldLabel": "Zufahrt für Maschinen möglich? ",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "ja"
                  },
                  {
                    "option": "nein"
                  }
                ]
              }
            },
            {
              "fieldLabel": "Maschintyp",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "Harvester"
                  },
                  {
                    "option": "Forwarder"
                  },
                  {
                    "option": "(Seil-)Schlepper/Traktor"
                  },
                  {
                    "option": "Lkw"
                  },
                  {
                    "option": "Bagger"
                  },
                  {
                    "option": "sonstige Maschinen"
                  }
                ]
              },
              "multiselect": true
            },
            {
              "fieldLabel": "Maschinenbediener: ",
              "placeholder": "Fahrer 1, Fahrer 2, Fahrer3, .... "
            },
            {
              "fieldLabel": "Besondere Gefährdungen:",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "=Witterung/Nässe"
                  },
                  {
                    "option": "Boden nicht tragfähig"
                  },
                  {
                    "option": "Absturzgefahr "
                  },
                  {
                    "option": "Von Personen frequentiert/Spaziergänger"
                  },
                  {
                    "option": "Schlechte Sicht "
                  },
                  {
                    "option": "Böschungslage"
                  },
                  {
                    "option": "Verkehrswege"
                  },
                  {
                    "option": "Störender Bewuchs"
                  },
                  {
                    "option": "Wind"
                  },
                  {
                    "option": "Elektrische Freileitungen"
                  },
                  {
                    "option": "Gewässerrandlage"
                  },
                  {
                    "option": "Gefahrstoffe"
                  }
                ]
              },
              "multiselect": true
            },
            {
              "fieldLabel": "Maßnahmen bei besonderer Gefährdung eingeleitet?",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "ja"
                  },
                  {
                    "option": "nein"
                  }
                ]
              }
            },
            {
              "fieldLabel": "Im Trupp/Arbeitsgruppe  unterwiesen?",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "ja"
                  },
                  {
                    "option": "nein"
                  }
                ]
              }
            },
            {
              "fieldLabel": "Zustimmung:",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "Ich bestätige die Richtigkeit meiner Angaben und bin mit der Verarbeitung einverstanden."
                  }
                ]
              },
              "multiselect": true,
              "requiredField": true
            },
            {
              "fieldName": "Standortdaten - latitude (erster Wert in GoogleMaps)",
              "fieldType": "hiddenField",
              "fieldValue": "={{ $json[\"Standortdaten - latitude (erster Wert in GoogleMaps)\"] }}"
            },
            {
              "fieldName": "Standortdaten - longitude (zweiter Wert in GoogleMaps)",
              "fieldType": "hiddenField",
              "fieldValue": "={{ $json[\"Standortdaten - longitude (zweiter Wert in GoogleMaps)\"] }}"
            }
          ]
        },
        "options": {
          "buttonLabel": "weiter"
        }
      },
      "type": "n8n-nodes-base.form",
      "typeVersion": 1,
      "position": [
        -3392,
        -672
      ],
      "id": "2ad4df81-bf43-4daa-869d-854d2fa91671",
      "name": "Form1",
      "webhookId": "c9f15e3c-026b-49f5-99a1-2dfa3b8853e9",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "formTitle": "Neuer Arbeitsauftrag",
        "formDescription": "Geben Sie wichtige Angaben zu Ihrem Arbeitsauftrag an. ",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Datum Arbeitstag: ",
              "fieldType": "date",
              "requiredField": true
            },
            {
              "fieldLabel": "Einsatzort",
              "placeholder": "wo arbeiten Sie gerade?",
              "requiredField": true
            },
            {
              "fieldLabel": "Arbeitsverantwortlicher",
              "placeholder": "Wer führt die Arbeit durch? ",
              "requiredField": true
            },
            {
              "fieldLabel": "weitere Einsatzkräfte:",
              "placeholder": "wer arbeitet noch mit Ihnen? "
            },
            {
              "fieldLabel": "Ansprechpartner Kunde: ",
              "placeholder": "Waldbesitzer",
              "requiredField": true
            },
            {
              "fieldLabel": "Kunde Telefon: ",
              "fieldType": "number",
              "placeholder": "Telefonnummer"
            },
            {
              "fieldLabel": "Ersthelfer vor Ort: ",
              "placeholder": "Wer leistet erste Hilfe bei Unfällen? "
            }
          ]
        },
        "options": {
          "buttonLabel": "weiter",
          "customCss": ":root {\n\t--font-family: 'Open Sans', sans-serif;\n\t--font-weight-normal: 400;\n\t--font-weight-bold: 600;\n\t--font-size-body: 12px;\n\t--font-size-label: 14px;\n\t--font-size-test-notice: 12px;\n\t--font-size-input: 14px;\n\t--font-size-header: 20px;\n\t--font-size-paragraph: 14px;\n\t--font-size-link: 12px;\n\t--font-size-error: 12px;\n\t--font-size-html-h1: 28px;\n\t--font-size-html-h2: 20px;\n\t--font-size-html-h3: 16px;\n\t--font-size-html-h4: 14px;\n\t--font-size-html-h5: 12px;\n\t--font-size-html-h6: 10px;\n\t--font-size-subheader: 14px;\n\n\t/* Colors */\n\t--color-background: #fbfcfe;\n\t--color-test-notice-text: #e6a23d;\n\t--color-test-notice-bg: #fefaf6;\n\t--color-test-notice-border: #f6dcb7;\n\t--color-card-bg: #ffffff;\n\t--color-card-border: #dbdfe7;\n\t--color-card-shadow: rgba(99, 77, 255, 0.06);\n\t--color-link: #7e8186;\n\t--color-header: #525356;\n\t--color-label: #555555;\n\t--color-input-border: #dbdfe7;\n\t--color-input-text: #71747A;\n\t--color-focus-border: rgb(90, 76, 194);\n\t--color-submit-btn-bg: #ff6d5a;\n\t--color-submit-btn-text: #ffffff;\n\t--color-error: #ea1f30;\n\t--color-required: #ff6d5a;\n\t--color-clear-button-bg: #7e8186;\n\t--color-html-text: #555;\n\t--color-html-link: #ff6d5a;\n\t--color-header-subtext: #7e8186;\n\n\t/* Border Radii */\n\t--border-radius-card: 8px;\n\t--border-radius-input: 6px;\n\t--border-radius-clear-btn: 50%;\n\t--card-border-radius: 8px;\n\n\t/* Spacing */\n\t--padding-container-top: 24px;\n\t--padding-card: 24px;\n\t--padding-test-notice-vertical: 12px;\n\t--padding-test-notice-horizontal: 24px;\n\t--margin-bottom-card: 16px;\n\t--padding-form-input: 12px;\n\t--card-padding: 24px;\n\t--card-margin-bottom: 16px;\n\n\t/* Dimensions */\n\t--container-width: 448px;\n\t--submit-btn-height: 48px;\n\t--checkbox-size: 18px;\n\n\t/* Others */\n\t--box-shadow-card: 0px 4px 16px 0px var(--color-card-shadow);\n\t--opacity-placeholder: 0.5;\n}"
        }
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        -3840,
        -576
      ],
      "id": "e27ee8c0-a79d-4b1b-af4a-7b5934d8091b",
      "name": "On form submission1",
      "webhookId": "2d6de1b5-94ca-48a0-910d-4732073b32da"
    },
    {
      "parameters": {
        "operation": "completion",
        "completionTitle": "Eingabe abgeschlossen. ",
        "completionMessage": "Danke für die Übertragung, ihre Eingaben wurden erfolgreich versendet. \nWir wünschen eine gute und sichere Arbeit! ",
        "options": {}
      },
      "type": "n8n-nodes-base.form",
      "typeVersion": 1,
      "position": [
        -2944,
        -544
      ],
      "id": "2b6bfafb-3c9e-4657-a0e6-ededa954b90d",
      "name": "Form3",
      "webhookId": "435006ea-b74b-4078-917f-57ef18d9a85d"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "rettungspunkte",
        "returnAll": true,
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "wgs_breite",
              "condition": "gte",
              "keyValue": "={{ Number($json.formQueryParameters.lat) - 0.1 }}"
            },
            {
              "keyName": "wgs_breite",
              "condition": "lte",
              "keyValue": "={{ Number($json.formQueryParameters.lat) + 0.1 }}"
            },
            {
              "keyName": "wgs_laenge",
              "condition": "lte",
              "keyValue": "={{ Number($json.formQueryParameters.lon) + 0.1 }}"
            },
            {
              "keyName": "wgs_laenge",
              "condition": "gte",
              "keyValue": "={{ Number($json.formQueryParameters.lon) - 0.1 }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -2720,
        -544
      ],
      "id": "c9309ae1-8fa6-4518-8993-4a6a07bb486e",
      "name": "Get many rows1",
      "credentials": {
        "supabaseApi": {
          "id": "cyNSejswiPuBy0Mv",
          "name": "Rettungspunkte(Supabase)"
        }
      }
    },
    {
      "parameters": {
        "locationSelection": "coordinates",
        "latitude": "={{ $('On form submission1').item.json.formQueryParameters.lat }}",
        "longitude": "={{ $('On form submission1').item.json.formQueryParameters.lon }}",
        "language": "de"
      },
      "type": "n8n-nodes-base.openWeatherMap",
      "typeVersion": 1,
      "position": [
        -2720,
        -352
      ],
      "id": "deaf38ea-7fc1-42db-a187-21282caaf35b",
      "name": "OpenWeatherMap1",
      "notesInFlow": false,
      "credentials": {
        "openWeatherMapApi": {
          "id": "CWbJ42ss1QeH9GUK",
          "name": "OpenWeatherMap account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://gotenberg-liwwwqwh3q-ey.a.run.app/forms/chromium/convert/html",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "files",
              "inputDataFieldName": "files"
            },
            {
              "name": "paperWidth",
              "value": "={{ String($json.printOptions.paperWidth) }}"
            },
            {
              "name": "paperHeight",
              "value": "={{ String($json.printOptions.paperHeight) }}"
            },
            {
              "name": "marginTop",
              "value": "={{ $json.printOptions.marginTop }}"
            },
            {
              "name": "marginBottom",
              "value": "={{ $json.printOptions.marginBottom }}"
            },
            {
              "name": "printBackground",
              "value": "={{ String($json.printOptions.printBackground) }}"
            },
            {
              "name": "scale",
              "value": "={{ String($json.printOptions.scale) }}"
            },
            {
              "name": "marginLeft",
              "value": "={{ String($json.printOptions.marginLeft) }}"
            },
            {
              "name": "marginRight",
              "value": "={{ String($json.printOptions.marginRight) }}"
            },
            {
              "parameterType": "formBinaryData",
              "name": "header",
              "inputDataFieldName": "header"
            },
            {
              "parameterType": "formBinaryData",
              "name": "footer",
              "inputDataFieldName": "footer"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "neverError": "={{ false }}",
              "responseFormat": "file"
            }
          },
          "timeout": 600000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -928,
        -96
      ],
      "id": "95c1ad08-48a9-4d09-8b0d-a2238f0b1f0f",
      "name": "HTML → PDF (Gotenberg)1"
    },
    {
      "parameters": {
        "sendTo": "rusmir.omerovic@web.de",
        "subject": "Neuer Forstauftrag",
        "message": "Im Anhang findest du das automatisch erzeugte PDF zum Forstauftrag.",
        "options": {
          "attachmentsUi": {
            "attachmentsBinary": [
              {}
            ]
          }
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2,
      "position": [
        -480,
        -96
      ],
      "id": "c9926257-b37d-4c93-9533-767de812816e",
      "name": "Send a message1",
      "webhookId": "9e016e9a-d8de-45cc-80a9-cbcef0019843",
      "credentials": {
        "gmailOAuth2": {
          "id": "r9L6sNQuvKW3wsFJ",
          "name": "Gmail account 2"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {
          "includeUnpaired": true
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -2272,
        -672
      ],
      "id": "ea109995-c483-4f85-b450-3c49c69b5f68",
      "name": "Merge2"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "numberInputs": 4,
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -2496,
        -816
      ],
      "id": "f68094ef-da84-4f00-826a-cc429a42a6ec",
      "name": "Merge1"
    },
    {
      "parameters": {
        "mode": "jsonToBinary",
        "convertAllData": false,
        "sourceKey": "headerTemplate",
        "destinationKey": "header",
        "options": {
          "encoding": "utf8",
          "fileName": "header.html",
          "mimeType": "text/html; charset=utf-8",
          "useRawData": true
        }
      },
      "type": "n8n-nodes-base.moveBinaryData",
      "typeVersion": 1.1,
      "position": [
        -1600,
        -96
      ],
      "id": "1493e62f-5438-48d9-ae41-f85b239565ac",
      "name": "header"
    },
    {
      "parameters": {
        "mode": "jsonToBinary",
        "convertAllData": false,
        "sourceKey": "footerTemplate",
        "destinationKey": "footer",
        "options": {
          "encoding": "utf8",
          "fileName": "footer.html",
          "mimeType": "text/html; charset=utf-8",
          "useRawData": true
        }
      },
      "type": "n8n-nodes-base.moveBinaryData",
      "typeVersion": 1.1,
      "position": [
        -1376,
        -96
      ],
      "id": "c526a981-ea31-444e-8c90-0caa5d6c071f",
      "name": "footer"
    },
    {
      "parameters": {
        "jsCode": "// Mode: Run Once for All Items\nasync function toDataUrl(name) {\n  try {\n    // Holt den Buffer aus items[0].binary[name]\n    const buf = await this.helpers.getBinaryDataBuffer(0, name);\n    const mime = (items[0].binary?.[name]?.mimeType) || 'image/png';\n    return `data:${mime};base64,${buf.toString('base64')}`;\n  } catch {\n    return null; // falls das Property fehlt\n  }\n}\n\nreturn [{\n  json: {\n    assets: {\n      ryzeup: await toDataUrl('ryzeup'),\n      bg:     await toDataUrl('bg'),\n      fa:     await toDataUrl('fa'),\n    }\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2720,
        -48
      ],
      "id": "f310642f-5078-4848-9d3e-244afcb8d060",
      "name": "logo-names"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Forstauftrag PDF-Generator (Gotenberg/Chromium)\n// 1) Liest n8n-Itemdaten (Form + Zusatzdaten)\n// 2) Erzeugt Header/Footer (Chromium-Seitenränder) und HTML\n// 3) Gotenberg rendert PDF inkl. Header/Footer auf jeder Seite\n\nconst d = item.json || {};\nconst now = new Date().toLocaleString('de-DE', { dateStyle: 'medium', timeStyle: 'short' });\n\n// Helper: ersten gesetzten Wert liefern\nconst pick = (keys, def='—') => {\n  for (const k of keys) {\n    const v = d?.[k];\n    if (v !== undefined && v !== null && String(v) !== '') return v;\n  }\n  return def;\n};\n\n// ---- Logos aus $binary in Data-URLs wandeln ----\nfunction binToDataUrl(name, fallbackMime = 'image/png') {\n  try {\n    const meta = $binary?.[name];\n    if (!meta) return null;\n    const buf  = this.helpers.getBinaryDataBuffer(0, name);\n    const mime = meta.mimeType || fallbackMime;\n    return `data:${mime};base64,${buf.toString('base64')}`;\n  } catch { return null; }\n}\n\n// 1) Logos vorbereiten (Data-URL > evtl. d.assets > null)\nconst logoLeftPrepared   = binToDataUrl.call(this, 'ryzeup') || d?.assets?.ryzeup || null;\nconst logoCenterPrepared = binToDataUrl.call(this, 'bg')     || d?.assets?.bg     || null;\nconst logoRightPrepared  = binToDataUrl.call(this, 'fa')     || d?.assets?.fa     || null;\n\n// 2) THEME erst jetzt definieren – mit vorbereiteten Logos\nconst THEME = {\n  brandBg:    '#112240',\n  brandText:  '#e6e1e1',\n  bodyFont:   'Arial, Helvetica, sans-serif',\n  fontSizeH:  8,\n  fontSizeF:  8,\n  padH:       '6px 12px',\n  padF:       '4px 10px',\n  linkGap:    '16px',\n  borderTopF: '1px solid rgba(255,255,255,.08)',\n  logoLeft:   logoLeftPrepared,\n  logoCenter: logoCenterPrepared,\n  logoRight:  logoRightPrepared,\n};\n\n\n\n// Header CSS\nconst hcss = `\n  *{box-sizing:border-box} body{margin:0; font-family:${THEME.bodyFont}}\n  :root{ --logo-h:40px; --logo-h-center:30px }\n  .wrap{padding:${THEME.padH}; font-size:${THEME.fontSizeH}px; line-height:1.35; width:100%}\n  .grid{display:grid; grid-template-columns:1fr auto 1fr; align-items:center; gap:12px}\n  .left,.right{display:flex; align-items:center; gap:12px}\n  .left{justify-content:flex-start}\n  .center{justify-self:center; display:flex; align-items:center; gap:8px}\n  .right{justify-content:flex-end}\n  .muted{opacity:.7; margin-top:4px}\n  img.logo{height:var(--logo-h)}\n  img.logo.center{height:var(--logo-h-center)}\n`;\n//CSS Footer\nconst fcss = `\n  *{box-sizing:border-box} body{margin:0; font-family:${THEME.bodyFont}}\n  .wrap{background:${THEME.brandBg}; color:${THEME.brandText}; padding:${THEME.padF};\n        font-size:${THEME.fontSizeF}px; line-height:1.35; border-top:${THEME.borderTopF}}\n  .row{display:flex; justify-content:space-between; align-items:center; flex-wrap:wrap; gap:10px}\n  .col{display:flex; gap:${THEME.linkGap}; align-items:center; flex-wrap:wrap}\n  a{color:${THEME.brandText}; text-decoration:none}\n  .num{white-space:nowrap}\n  img{height:14px}\n`;\n\n// === Feld-Mappings (deine Original-Feldnamen inkl. Aliase) ===\nconst meta = {\n  datum:            pick(['Datum Arbeitstag: ', 'Datum']),\n  einsatzort:       pick(['Einsatzort', 'Ort', 'Einsatz-Ort']),\n  verantwortlicher: pick(['Arbeitsverantwortlicher', 'Verantwortlicher']),\n  weitere:          pick(['weitere Einsatzkräfte:', 'weitere Einsatzkraefte'], '—'),\n  kunde:            pick(['Ansprechpartner Kunde: ', 'Kunde']),\n  kundeTel:         pick(['Kunde Telefon: ', 'Kunde Telefon', 'Telefon'], '—'),\n  ersthelfer:       pick(['Ersthelfer vor Ort: '], '—'),\n  submittedAt:      pick(['submittedAt'], now),\n};\n\nconst sicherheit = {\n  verkehr:           pick(['Verkehrsrechtliche Anordnung/Einsatz an Straße']),\n  absperrung:        pick(['Absperrung']),\n  helfer:            pick(['Posten - wie viele Helfer? ']),\n  psa:               pick(['Persönliche Schutzausrüstung geprüft/getragen? ']),\n  psaNote:           pick(['Bemerkungen zu Schutzausrüstung: ']),\n  zufahrt:           pick(['Zufahrt für Maschinen möglich? ']),\n  // Falls der Form-Key abweicht, hier anpassen:\n  maschinen:         Array.isArray(d.Maschintyp) ? d.Maschintyp : (d.Maschintyp ? [d.Maschintyp] : []),\n  maschinenbediener: pick(['Maschinenbediener: '], '—'),\n  gefaehrdungen:     Array.isArray(d['Besondere Gefährdungen:']) ? d['Besondere Gefährdungen:'] : [],\n  massnahmen:        pick(['Maßnahmen bei besonderer Gefährdung eingeleitet?']),\n  unterwiesen:       pick(['Im Trupp/Arbeitsgruppe  unterwiesen?']),\n};\n\n// Zustimmung\nconst zustimmung = Array.isArray(d['Zustimmung:'])\n  ? d['Zustimmung:'].join(', ')\n  : pick(['Zustimmung:', 'Zustimmung'], '—');\n\n// Wetter (OpenWeatherMap)\n// Wetter (OpenWeatherMap)\nconst wetter = {\n  beschreibung: d.weather?.[0]?.description ?? '—',\n  temp:         d.main?.temp ?? '—',\n  druck:        d.main?.pressure ?? '—',\n  wind:         d.wind?.speed ?? '—',\n  wolken:       d.clouds?.all ?? '—',\n  //Regenmenge in L/qm (1mm = 1 L/qm). Wenn kein Feld vorhanden: 0.\n  regen_lqm: (() => {\n    const v = d.rain?.['1h'] ?? d.rain?.['3h'] ?? 0;\n    const n = typeof v === 'number' ? v : Number(v);\n    return Number.isFinite(n) ? n : 0;\n  })(),\n};\n\n\n// Rettungspunkte & GPS\nconst rp = Array.isArray(d.top_3_rettungspunkte) ? d.top_3_rettungspunkte : [];\nconst gps = {\n  lat: pick(['Standortdaten - latitude (erster Wert in GoogleMaps)', 'lat', 'latitude'], ''),\n  lon: pick(['Standortdaten - longitude (zweiter Wert in GoogleMaps)', 'lon', 'longitude'], ''),\n};\nconst mapsUrl = (gps.lat && gps.lon)\n  ? `https://www.google.com/maps?q=${encodeURIComponent(`${gps.lat},${gps.lon}`)}`\n  : null;\n\n// === HTML-Helper ===\nconst esc = (v) => String(v ?? '')\n  .replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;')\n  .replace(/\"/g,'&quot;').replace(/'/g,'&#039;');\n\nconst chip  = (t) => `<span class=\"chip\">${esc(t)}</span>`;\n\n// FIX: war abgeschnitten → jetzt korrekt geschlossen\nconst chips = (arr = []) => (\n  arr.length\n    ? `<div class=\"chips\">${arr.map(chip).join('')}</div>`\n    : '<span class=\"muted\">—</span>'\n);\n\n// === BODY HTML ===\nconst html = `<!doctype html>\n<html lang=\"de\">\n<head>\n<meta charset=\"utf-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n<title>Arbeitsauftrag Forstwirtschaft</title>\n<style>\n  :root{\n    --bg:#0c1512; --surface:#12211a; --surface-2:#0e1b15; --card:#12261c;\n    --brand-1:#10b981; --brand-2:#34d399; --text:#e6f2ec; --muted:#9fb3aa;\n    --border:#0dde81; --warn:#f59e0b; --ok:#22c55e; --chip-bg:#5b7d71;\n    /* Platz im Body – unabhängig von Chromium-Header/Footer */\n    --top-gap: 0mm; --bottom-gap: 0mm;\n  }\n  @page { size:A4; }\n  html, body { height:100%; }\n  * { box-sizing:border-box; -webkit-print-color-adjust:exact; print-color-adjust:exact; }\n  body{margin:0;\n    background:var(--bg); color:var(--text);\n    font: 9pt/1.4 system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial,sans-serif;\n  }\n  .page{\n    width:210mm; background:var(--surface);\n    display:grid; grid-template-rows:auto 1fr auto;\n    padding: 0px 20px;\n  }\n  .header{\n    background: linear-gradient(135deg, var(--brand-1), var(--brand-2));\n    color:#05110d; border-radius:10px; padding:4mm 6mm; margin-bottom:4mm;\n    margin-top: 2mm;\n  }\n  .header h1{ margin:0 0 2mm; font-size:16pt; letter-spacing:.2px; }\n  .header .sub{ margin:0; opacity:.85; }\n  .meta{ margin-top:2mm; display:flex; gap:6mm; flex-wrap:wrap; font-size:10pt;\n  color:#052017; font-weight:600; \n  }\n  .content{\n  display: flex;               /* oder: display:grid */\n  flex-direction: column;      /* bei grid nicht nötig */\n  row-gap: 4mm;/* <— HIER stellst du den Card-Abstand ein */\n  padding-bottom: 2mm;\n  padding-top: 2mm;\n  }\n  .card{ \n  background:var(--card); border:1px solid var(--border); \n  border-radius:12px;margin:0;\n  overflow:hidden; box-shadow:0 8px 24px rgba(0,0,0,.23); page-break-inside:avoid;\n  break-inside:avoid-page; \n  }\n         \n  .card .card-h{ padding:4mm 6mm 3mm; font-weight:600; letter-spacing:.3px; border-bottom:1px solid var(--border); }\n  .card .card-b{ padding:2.5mm 4mm; }\n  .card[class*='card--']{ border-left:4px solid var(--accent); }\n  .card[class*='card--'] .card-h{ background:var(--accent); color:#05110d; }\n  .card--auftrag{ --accent:#34d399; }\n  .card--sicherheit{ --accent:#f59e0b; }\n  .card--wetter{ --accent:#3b82f6; }\n  .card--rettung{ --accent:#ef4444; }\n  .card--gps{ --accent:#8b5cf6; }\n  .card--zustimmung{ --accent:#10b981; }\n  .grid{ display:flex; flex-wrap:wrap; gap:3mm 5mm; }\n  .row{ display:flex; flex-direction:column; flex:1 1 calc(50% - 5mm); min-width:80mm; }\n  .label{ font-size:10pt; color:var(--muted); text-transform:uppercase; letter-spacing:.35px; margin-bottom:1mm; }\n  .val{ font-size:11pt; font-weight:600; }\n  .yes{ color:var(--ok); } .no{ color:var(--warn); }\n  .chips{ display:flex; flex-wrap:wrap; gap:4mm; margin-top:2mm; }\n  .chip{ background:var(--chip-bg); border:1px solid var(--border); padding:2.5mm 4mm; border-radius:999px; font-size:9pt; font-weight:700; color:var(--text); }\n  .chip.hazard{ background:#3b1f0a; border-color:#7a3c11; color:#ffcc88; }\n  .weather{ display:grid; grid-template-columns:repeat(5,1fr); gap:6mm; text-align:center; }\n  .wbox{ background:var(--surface-2); border:1px solid var(--border); border-radius:10px; padding:6mm 4mm; }\n  .wval{ font-size:14pt; font-weight:800; color:var(--brand-2); margin-bottom:1mm; }\n  .wlab{ font-size:8pt; color:var(--muted); text-transform:uppercase; }\n  table.tbl{ width:100%; border-collapse:separate; border-spacing:0; background:var(--surface-2); border:1px solid var(--border); border-radius:10px; overflow:hidden; }\n  .tbl thead th{ background:#0f2b20; color:#c9f0e1; text-align:left; padding:4.5mm 5mm; font-size:9pt; border-bottom:1px solid var(--border); }\n  .tbl td{ padding:4mm 5mm; border-bottom:1px solid var(--border); }\n  .tbl tr:last-child td{ border-bottom:0; }\n  .td-num{ text-align:right; font-weight:700; color:var(--brand-2); }\n  .gps{ background:var(--surface-2); border:1px solid var(--border); border-radius:10px; padding:6mm; text-align:center; }\n  .coord{ font:700 14pt/1.1 ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; color:#8be0b6; margin:2mm 0 3mm; }\n  .map a{ color:var(--brand-2); text-decoration:none; font-weight:700; }\n  .map a:hover{ text-decoration:underline; }\n  .consent{ display:flex; align-items:center; gap:4mm; }\n  .consent-check{ font-size:14pt; color:var(--brand-2); }\n  .consent-text{ font-size:10.5pt; line-height:1.4; }\n  .consent-note{ margin-top:4mm; font-size:9pt; color:var(--muted); }\n  @media screen and (max-width:900px){\n    .grid{ flex-direction:column; }\n    .row{ flex-basis:100%; }\n    .weather{ display:grid; grid-template-columns:repeat(3,1fr); gap:5mm; text-align:center; }\n   @media screen and (max-width:900px){\n    .weather{ grid-template-columns: repeat(2, 1fr); }\n   }\n  }\n</style>\n</head>\n<body>\n  <div class=\"page\">\n    <!-- Body-Header (ästhetischer Kasten, unabhängig vom Chromium-Header) -->\n    <div class=\"header\">\n      <h1>Arbeitsauftrag Forstwirtschaft</h1>\n      <p class=\"sub\">Einsatzort: ${esc(meta.einsatzort || '—')}</p>\n      <div class=\"meta\">\n        <div><strong>Datum:</strong> ${esc(meta.datum || '—')}</div>\n        <div><strong>Erstellt:</strong> ${esc(now)}</div>\n        <div><strong>Verantwortlich:</strong> ${esc(meta.verantwortlicher || '—')}</div>\n      </div>\n    </div>\n\n    <!-- Inhalt -->\n    <div class=\"content\">\n\n      <div class=\"card card--auftrag\">\n        <div class=\"card-h\">Auftragsdaten</div>\n        <div class=\"card-b\">\n          <div class=\"grid\">\n            <div class=\"row\"><div class=\"label\">Einsatzort</div><div class=\"val\">${esc(meta.einsatzort || '—')}</div></div>\n            <div class=\"row\"><div class=\"label\">Arbeitsverantwortlicher</div><div class=\"val\">${esc(meta.verantwortlicher || '—')}</div></div>\n            <div class=\"row\"><div class=\"label\">Weitere Einsatzkräfte</div><div class=\"val\">${esc(meta.weitere || '—')}</div></div>\n            <div class=\"row\"><div class=\"label\">Ansprechpartner Kunde</div><div class=\"val\">${esc(meta.kunde || '—')}</div></div>\n            <div class=\"row\"><div class=\"label\">Kunde Telefon</div><div class=\"val\">${esc(meta.kundeTel || '—')}</div></div>\n            <div class=\"row\"><div class=\"label\">Ersthelfer vor Ort</div><div class=\"val\">${esc(meta.ersthelfer || '—')}</div></div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"card card--sicherheit\">\n        <div class=\"card-h\">Sicherheit &amp; Organisation</div>\n        <div class=\"card-b\">\n          <div class=\"grid\">\n            <div class=\"row\"><div class=\"label\">Verkehrsrechtliche Anordnung</div><div class=\"val ${sicherheit.verkehr === 'ja' ? 'yes' : 'no'}\">${esc(sicherheit.verkehr)}</div></div>\n            <div class=\"row\"><div class=\"label\">Absperrung</div><div class=\"val\">${esc(sicherheit.absperrung)}</div></div>\n            <div class=\"row\"><div class=\"label\">Posten/Helfer</div><div class=\"val\">${esc(sicherheit.helfer)}</div></div>\n            <div class=\"row\"><div class=\"label\">PSA geprüft/getragen</div><div class=\"val ${sicherheit.psa === 'ja' ? 'yes' : 'no'}\">${esc(sicherheit.psa)}</div></div>\n            <div class=\"row\"><div class=\"label\">Zufahrt für Maschinen</div><div class=\"val ${sicherheit.zufahrt === 'ja' ? 'yes' : 'no'}\">${esc(sicherheit.zufahrt)}</div></div>\n            <div class=\"row\"><div class=\"label\">Maschinenbediener</div><div class=\"val\">${esc(sicherheit.maschinenbediener)}</div></div>\n          </div>\n\n          ${ (sicherheit.psaNote && sicherheit.psaNote !== '—')\n              ? '<div style=\"margin-top:5mm\">'\n                + '<div class=\"label\">Bemerkungen PSA</div>'\n                + '<div class=\"val\">' + esc(sicherheit.psaNote) + '</div>'\n              + '</div>'\n              : ''\n          }\n\n          <div style=\"margin-top:6mm\">\n            <div class=\"label\">Maschinentyp(en)</div>\n            ${chips(sicherheit.maschinen)}\n          </div>\n\n          ${ sicherheit.gefaehrdungen.length\n              ? '<div style=\"margin-top:6mm\">'\n                + '<div class=\"label\">Besondere Gefährdungen</div>'\n                + chips(sicherheit.gefaehrdungen.map(g => `⚠️ ${g}`))\n              + '</div>'\n              : ''\n          }\n\n          <div class=\"grid\" style=\"margin-top:6mm\">\n            <div class=\"row\"><div class=\"label\">Maßnahmen bei Gefährdung eingeleitet</div><div class=\"val ${sicherheit.massnahmen === 'ja' ? 'yes' : 'no'}\">${esc(sicherheit.massnahmen)}</div></div>\n            <div class=\"row\"><div class=\"label\">Unterweisung im Trupp</div><div class=\"val ${sicherheit.unterwiesen === 'ja' ? 'yes' : 'no'}\">${esc(sicherheit.unterwiesen)}</div></div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"card card--wetter\">\n        <div class=\"card-h\">Wetterbedingungen</div>\n        <div class=\"card-b\">\n          <div class=\"weather\">\n            <div class=\"wbox\"><div class=\"wval\">${esc(wetter.beschreibung)}</div><div class=\"wlab\">Beschreibung</div></div>\n            <div class=\"wbox\"><div class=\"wval\">${esc(wetter.temp)} °C</div><div class=\"wlab\">Temperatur</div></div>\n            <div class=\"wbox\"><div class=\"wval\">${esc(wetter.druck)} hPa</div><div class=\"wlab\">Luftdruck</div></div>\n            <div class=\"wbox\"><div class=\"wval\">${esc(wetter.wind)} m/s</div><div class=\"wlab\">Wind</div></div>\n            <div class=\"wbox\"><div class=\"wval\">${esc(wetter.wolken)} %</div><div class=\"wlab\">Bewölkung</div></div>\n            <div class=\"wbox\"><div class=\"wval\">${esc(wetter.regen_lqm)} L/qm</div><div class=\"wlab\">Niederschlag (letzte Std.)</div></div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"card card--rettung\">\n        <div class=\"card-h\">Nächste Rettungspunkte</div>\n        <div class=\"card-b\">\n          <table class=\"tbl\">\n            <thead><tr><th>#</th><th>RP-Nummer</th><th>Beschreibung</th><th>Bundesland</th><th style=\"text-align:right\">Entfernung</th></tr></thead>\n            <tbody>\n              ${\n                rp.length\n                  ? rp.map((p,i) =>\n                      '<tr>'\n                        + '<td>' + (i+1) + '</td>'\n                        + '<td><strong>' + esc(p.rp_nr) + '</strong></td>'\n                        + '<td>' + esc(p.beschreibung) + '</td>'\n                        + '<td>' + esc(p.bundesland) + '</td>'\n                        + '<td class=\"td-num\">' + esc(p.entfernung_m) + ' m</td>'\n                      + '</tr>'\n                    ).join('')\n                  : '<tr><td colspan=\"5\" style=\"text-align:center;color:var(--muted);font-style:italic;padding:7mm 0\">Keine Rettungspunkte gefunden</td></tr>'\n              }\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      <div class=\"card card--gps\">\n        <div class=\"card-h\">GPS-Standort</div>\n        <div class=\"card-b\">\n         <div class=\"gps\">\n<div class=\"label\">Koordinaten</div>\n<div class=\"coord\">\n${esc($json.gps_ursprung?.latitude ?? 'kein latitude/Breitengrad')},\n${esc($json.gps_ursprung?.longitude ?? 'keine longitude/Längengrad')}\n</div>\n</div>\n\n<div class=\"map\">\n${ $json.gps_ursprung?.maps?.gmaps\n? '<a href=\"' + esc($json.gps_ursprung.maps.gmaps) + '\">🗺️ Google Maps öffnen</a>'\n: '<span style=\"color:var(--muted)\">Kein Kartenlink verfügbar</span>'\n}\n<br/>\n${ $json.gps_ursprung?.maps?.osm\n? '<a href=\"' + esc($json.gps_ursprung.maps.osm) + '\">🗺️ OpenStreetMap öffnen</a>'\n: ''\n}\n<br/>\n${ $json.gps_ursprung?.maps?.apple\n? '<a href=\"' + esc($json.gps_ursprung.maps.apple) + '\">🗺️ Apple Maps öffnen</a>'\n: ''\n}\n</div>\n        </div>\n      </div>\n\n      <div class=\"card card--zustimmung\">\n        <div class=\"card-h\">Zustimmung</div>\n        <div class=\"card-b\">\n          <div class=\"consent\">\n            <div class=\"consent-check\">✓</div>\n            <div class=\"consent-text\">Zustimmung des Nutzers (${esc(meta.verantwortlicher || '—')})</div>\n          </div>\n          <div class=\"consent-note\">Diese digitale Zustimmung per Haken repräsentiert eine Unterschrift des Nutzers.</div>\n        </div>\n      </div>\n\n    </div>\n  </div>\n</body>\n</html>\n`;\n\n// Header-Template\nconst headerTemplate = `\n  <style>${hcss}</style>\n  <div class=\"wrap\">\n    <div class=\"grid\">\n      <div class=\"left\">\n        ${THEME.logoLeft ? `<img class=\"logo\" src=\"${THEME.logoLeft}\" alt=\"Logo left\">` : ''}\n      </div>\n      <div class=\"center\">\n        ${THEME.logoCenter ? `<img class=\"logo center\" src=\"${THEME.logoCenter}\" alt=\"Logo center\">` : ''}\n        <strong>Forstauftrag</strong>\n      </div>\n      <div class=\"right\">\n        ${THEME.logoRight ? `<img class=\"logo\" src=\"${THEME.logoRight}\" alt=\"Logo right\">` : ''}\n      </div>\n    </div>\n    <div class=\"muted\">Einsatzort: ${esc(meta.einsatzort || '—')} · ${esc(now)}</div>\n  </div>\n`;\n\n// === CHROMIUM FOOTER ===\nconst footerTemplate = `\n  <style>${fcss}</style>\n  <div class=\"wrap\">\n    <div class=\"row\">\n      <div class=\"col\">\n        ${THEME.logoLeft ? `<img src=\"${THEME.logoLeft}\" alt=\"Logo\"/>` : ''}\n        <strong>Ryzeup UG</strong>\n        <span>Rotthang 3, 84494 Neumarkt-Sankt Veit</span>\n        <span>HRB 33167, AG Traunstein</span>\n      </div>\n      <div class=\"col\">\n        <a>Kontakt</a><a>About</a><a>Termin</a><a>Datenschutz</a>\n        <span class=\"num\"><span class=\"pageNumber\"></span>/<span class=\"totalPages\"></span></span>\n      </div>\n    </div>\n    <div class=\"row\" style=\"margin-top:4px\">\n      <div>© ${new Date().getFullYear()} Ryzeup UG. Alle Rechte vorbehalten.</div>\n    </div>\n  </div>\n`;\n\n// === EMPFOHLENE DRUCK-RÄNDER FÜR Gotenberg/Chromium ===\n// Diese Werte musst du beim HTTP Request mitgeben (siehe unten).\nconst printOptions = {\n  paperWidth:  8.27,  // A4 in Inch\n  paperHeight: 11.69, // A4 in Inch\n  marginTop:    0.83,  // ~15 mm\n  marginBottom: 0.67,  // ~15 mm\n  marginLeft:   0, // 10 mm\n  marginRight:  0, // 10 mm\n  printBackground: true,\n  scale: 1,\n};\n\n// ---------- Robustheits-Footer für pdf-template.js ----------\n\nconst MAX_ATTEMPTS = 5;\nconst BASE_DELAY_MS = 500;\nconst JITTER_MS = 250;\n\nconst sleep = (ms) => new Promise(r => setTimeout(r, ms));\n\nfunction get(obj, path) {\n  return path.split('.').reduce((o, k) => (o && o[k] !== undefined ? o[k] : undefined), obj);\n}\n\nfunction hasAll(paths, root) {\n  return paths.every(p => {\n    const v = get(root, p);\n    return v !== undefined && v !== null && !(typeof v === 'string' && v.trim() === '');\n  });\n}\n\n// Wenn du Daten aus benannten Nodes brauchst, kannst du sie hier mergen.\nfunction isReady() {\n  return true;\n}\n\n// Achtung: Wir geben bewusst KEIN ...item.json zurück, um Payload-Aufblähung & Zyklen zu verhindern.\nasync function finalizePdfSafe(buildFn) {\n  for (let attempt = 1; attempt <= MAX_ATTEMPTS; attempt++) {\n    if (isReady()) {\n      const result = buildFn();\n\n      // Mini-Validierung gegen leere PDFs\n      if (!result || !result.html || typeof result.html !== 'string' || result.html.trim() === '') {\n        throw new Error('TransientError: html not built yet');\n      }\n\n      // N8N-Format: Array von Items mit { json: ... }\n      return { json: result };\n    }\n    if (attempt < MAX_ATTEMPTS) {\n      const backoff = BASE_DELAY_MS * Math.pow(2, attempt - 1);\n      const jitter = Math.floor(Math.random() * JITTER_MS);\n      const wait = backoff + jitter;\n      console.log(`[pdf-template] Inputs not ready (${attempt}/${MAX_ATTEMPTS - 1}). Wait ${wait}ms`);\n      await sleep(wait);\n    }\n  }\n  throw new Error('TransientError: PDF template inputs not ready');\n}\n\n// ---------- ENDE Robustheits-Footer ----------\n\nfunction buildOriginalReturn() {\n  return {\n    html,\n    headerTemplate,\n    footerTemplate,\n    printOptions,\n    // << NEU: nur was der nächste Node zum Benennen braucht\n    metaForFilename: {\n      einsatzort: meta.einsatzort || '',\n      datum: meta.datum || ''   // deine Formular-Datumsspalte\n    }\n  };\n}\n\nreturn await finalizePdfSafe(buildOriginalReturn);\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1824,
        -96
      ],
      "id": "b7ed8196-7d6a-4bd1-b494-d1d344be3a33",
      "name": "pdf-template.js"
    },
    {
      "parameters": {
        "url": "https://raw.githubusercontent.com/RusmirOmerovic/n8n-forstauftrag/main/img/ryzeup-logo.png",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "ryzeup"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3616,
        -176
      ],
      "id": "f5441e08-bba1-40b7-9434-9a43a11db389",
      "name": "ryzeup-logo",
      "alwaysOutputData": false,
      "executeOnce": false,
      "notesInFlow": false
    },
    {
      "parameters": {
        "url": "https://raw.githubusercontent.com/RusmirOmerovic/n8n-forstauftrag/main/img/fa-logo.png",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "fa"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3168,
        0
      ],
      "id": "f41c5b17-89b5-4a48-83b3-5ebdaecc2072",
      "name": "fa-logo"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {
          "includeUnpaired": true
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -2048,
        -96
      ],
      "id": "fa078c5e-93ec-4b73-bb4c-7ce4740c165f",
      "name": "data+logos"
    },
    {
      "parameters": {
        "url": "https://raw.githubusercontent.com/RusmirOmerovic/n8n-forstauftrag/main/img/Bg-logo.png",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "bg"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3616,
        32
      ],
      "id": "019b374a-d1c8-420e-ba5f-f72e77445386",
      "name": "Bg-logo"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -2944,
        -48
      ],
      "id": "8c559737-c6b1-484d-b00f-923bd4b510f2",
      "name": "merge-logos"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -3392,
        -48
      ],
      "id": "14885d29-eace-435b-8379-96b16f447ab3",
      "name": "MergeA"
    },
    {
      "parameters": {
        "jsCode": "// --- Konfiguration ---\nconst BIN_PROP = 'data'; // Binary-Property aus dem Gotenberg-Node\n\n// Hilfsfunktionen\nfunction toDDMMYYYY(raw) {\n  if (typeof raw === 'string' && /^\\d{4}-\\d{2}-\\d{2}/.test(raw)) {\n    const d = new Date(raw + 'T00:00:00Z');\n    const dd = String(d.getUTCDate()).padStart(2, '0');\n    const mm = String(d.getUTCMonth() + 1).padStart(2, '0');\n    const yy = d.getUTCFullYear();\n    return `${dd}-${mm}-${yy}`;\n  }\n  const n = new Date();\n  return `${String(n.getDate()).padStart(2,'0')}-${String(n.getMonth()+1).padStart(2,'0')}-${n.getFullYear()}`;\n}\n\nfunction normalizeOrt(s) {\n  let t = (s ?? '').toString().trim();\n  t = t.replace(/ä/g,'ae').replace(/ö/g,'oe').replace(/ü/g,'ue')\n       .replace(/Ä/g,'Ae').replace(/Ö/g,'Oe').replace(/Ü/g,'Ue')\n       .replace(/ß/g,'ss');\n  t = t.replace(/\\s+/g,'_').replace(/[^A-Za-z0-9_\\-]/g,'_');\n  t = t.replace(/_+/g,'_').replace(/^_+|_+$/g,'');\n  return t || 'unbekannterOrt';\n}\n\n// Hauptlogik\nconst out = (items || []).map((it) => {\n  const j = it.json || {};\n\n  // 1) Werte bevorzugt aus metaForFilename, sonst aus j[...]\n  const ortRaw = j.metaForFilename?.einsatzort\n              ?? j['Einsatzort'] ?? j['einsatzort'] ?? j['Ort'] ?? '';\n  const dateRaw = j.metaForFilename?.datum\n               ?? j['Datum Arbeitstag'] ?? j['Datum'] ?? j['date'] ?? '';\n\n  // 2) Aufbereiten\n  const datePart = toDDMMYYYY(dateRaw);\n  const ortPart  = normalizeOrt(ortRaw);\n\n  // 3) Dateiname bauen\n  const fileName = `FA_${datePart}_${ortPart}.pdf`;\n\n  // 4) Am Binary setzen\n  if (it.binary && it.binary[BIN_PROP]) {\n    it.binary[BIN_PROP].fileName = fileName;\n    it.binary[BIN_PROP].mimeType = 'application/pdf';\n    it.binary[BIN_PROP].fileExtension = 'pdf';\n  }\n  return it;\n});\n\nreturn out;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -704,
        -96
      ],
      "id": "2785efee-73e8-41f0-a14d-c4231615580a",
      "name": "pdf-filename"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Query params ziehen\nconst q = $json.query || $json;\nlet lat = q.lat ?? q.latitude ?? null;\nlet lon = q.lon ?? q.longitude ?? null;\n\n// === TEST-FALLBACK ===\n// greift NUR, wenn a) keine Koordinaten da sind UND b) noGeo=1 ODER Form im Testmodus ist\nconst isTest = String($json.formMode || '').toLowerCase() === 'test';\nif ((lat == null || lon == null) && (q.noGeo === '1' || isTest)) {\n  // München Marienplatz: 48.137154, 11.576124 (nur fürs Testen!)\n  lat = '48.137154';\n  lon = '11.576124';\n  $json.geo_source = 'fallback';   // Meta fürs Debug/Sheet\n}\n\nif (lat != null && lon != null) {\n  $json['Standortdaten - latitude (erster Wert in GoogleMaps)']  = String(lat);\n  $json['Standortdaten - longitude (zweiter Wert in GoogleMaps)'] = String(lon);\n}\n\nif (q.einsatzort) $json['Einsatzort'] = String(q.einsatzort);\nreturn item;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3616,
        -672
      ],
      "id": "bbda2381-14f3-47ff-9537-74b93fe0fc32",
      "name": "pull-query-to-json"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9b20c06e-db7e-4a69-9fc4-73ceffa4b16a",
              "name": "formQueryParameters.lat",
              "value": "={{ $('On form submission1').item.json.formQueryParameters.lat }}",
              "type": "string"
            },
            {
              "id": "863e8f1c-9ece-4802-abff-d8c2c464843b",
              "name": "formQueryParameters.lon",
              "value": "={{ $('On form submission1').item.json.formQueryParameters.lon }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3168,
        -544
      ],
      "id": "0319143f-8c5e-4e18-a87b-07649676da9b",
      "name": "geo-set"
    },
    {
      "parameters": {
        "jsCode": "// 1) GPS-Quelle: Form3 bevorzugt; Fallback: Form1; zusätzlich formQueryParameters (lat/lon)\nfunction getFormNode() {\nconst f3 = $('Form3').first();\nif (f3 && f3.json) return { name: 'Form3', json: f3.json };\nconst f1 = $('Form1').first();\nif (f1 && f1.json) return { name: 'Form1', json: f1.json };\nreturn { name: null, json: null };\n}\nconst { name: formNodeName, json: form } = getFormNode();\n\n// Robust: Koordinaten aus Formularfeldern ODER formQueryParameters\nconst latStr = form?.['Standortdaten - latitude (erster Wert in GoogleMaps)'];\nconst lonStr = form?.['Standortdaten - longitude (zweiter Wert in GoogleMaps)'];\nconst qpLat = form?.formQueryParameters?.lat;\nconst qpLon = form?.formQueryParameters?.lon;\n\n// Helper: Kommas & Strings tolerant parsen\nfunction toNum(v) {\nif (v === null || v === undefined) return NaN;\nreturn Number.parseFloat(String(v).replace(',', '.').trim());\n}\n\nlet latitude = toNum(latStr);\nlet longitude = toNum(lonStr);\nlet source = 'form_fields';\nif (!Number.isFinite(latitude) || !Number.isFinite(longitude)) {\nlatitude = toNum(qpLat);\nlongitude = toNum(qpLon);\nif (Number.isFinite(latitude) && Number.isFinite(longitude)) {\nsource = 'formQueryParameters:lat|lon';\n}\n}\n\n// Wenn weiterhin keine gültigen Koordinaten → leer zurückgeben (aber nicht hart failen)\nif (!Number.isFinite(latitude) || !Number.isFinite(longitude)) {\nreturn [{\njson: {\ngps_ursprung: null,\ntop_3_rettungspunkte: [],\nnaechster_rettungspunkt: null,\nhinweis: 'Kein gültiges GPS im Formular gefunden.',\ndebug: {\nform_node_found: !!form,\nform_node_name: formNodeName ?? null,\nform_keys: form ? Object.keys(form) : []\n}\n}\n}];\n}\n\n// 2) Rettungspunkte kommen als Items vom Supabase-Node\nconst rettungspunkte = $items();\n\n// 3) Haversine – Meter\nfunction distM(lat1, lon1, lat2, lon2) {\nconst R = 6371e3, toRad = d => d * Math.PI / 180;\nconst φ1 = toRad(lat1), φ2 = toRad(lat2);\nconst Δφ = toRad(lat2 - lat1), Δλ = toRad(lon2 - lon1);\nconst a = Math.sin(Δφ/2)**2 + Math.cos(φ1)*Math.cos(φ2)*Math.sin(Δλ/2)**2;\nreturn 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)) * R;\n}\n\n// 4) Maps-Link-Builder (Google, OSM, Apple)\nfunction mapsFor(lat, lon, label = 'Standort') {\nconst latS = Number(lat).toFixed(6);\nconst lonS = Number(lon).toFixed(6);\nconst q = `${latS},${lonS}`;\nreturn {\ngmaps: `https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(q)}`,\nosm: `https://www.openstreetmap.org/?mlat=${latS}&mlon=${lonS}#map=17/${latS}/${lonS}`,\napple: `https://maps.apple.com/?ll=${latS},${lonS}&q=${encodeURIComponent(label)}`\n};\n}\n\n// 5) Distanzen + Links berechnen\nconst list = rettungspunkte.map(p => {\nconst latP = toNum(p.json.wgs_breite);\nconst lonP = toNum(p.json.wgs_laenge);\nif (!Number.isFinite(latP) || !Number.isFinite(lonP)) return null;\nconst m = Math.round(distM(latitude, longitude, latP, lonP));\nconst maps = mapsFor(latP, lonP, `Rettungspunkt ${p.json.rp_nr ?? ''}`.trim());\nreturn {\nrp_nr: p.json.rp_nr,\nentfernung_m: m,\nentfernung_text: m < 1000 ? `${m} m` : `${(m/1000).toFixed(2)} km`,\nlat: latP, lon: lonP,\nid: p.json.id,\nbeschreibung: p.json.beschreibung,\nbundesland: p.json.bundesland,\nmaps\n};\n}).filter(Boolean);\n\nif (!list.length) {\nreturn [{\njson: {\ngps_ursprung: { latitude, longitude, source, maps: mapsFor(latitude, longitude) },\ntop_3_rettungspunkte: [],\nnaechster_rettungspunkt: null\n}\n}];\n}\n\n// 6) Sortierung & Output\nconst top3 = list.sort((a,b) => a.entfernung_m - b.entfernung_m).slice(0, 3);\nreturn [{\njson: {\ngps_ursprung: { latitude, longitude, source, maps: mapsFor(latitude, longitude, 'Einsatzort') },\ntop_3_rettungspunkte: top3,\nnaechster_rettungspunkt: top3[0]\n}\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2496,
        -496
      ],
      "id": "d07bcea4-a03c-40c2-8baf-d15c425f0f1d",
      "name": "harvesine"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1B56Kah2t7Dz84usjQfQNnefK3R2rgQGO0H2hRndCtzc",
          "mode": "list",
          "cachedResultName": "auftragsdaten",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1B56Kah2t7Dz84usjQfQNnefK3R2rgQGO0H2hRndCtzc/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Tabellenblatt1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1B56Kah2t7Dz84usjQfQNnefK3R2rgQGO0H2hRndCtzc/edit#gid=0"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -2048,
        -720
      ],
      "id": "8494ed31-cf4f-4eb6-af30-da3f3efda239",
      "name": "Get row(s) in sheet",
      "alwaysOutputData": false,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "awTBm5n9jFsyxPvL",
          "name": "Google Sheets rusmir-projects"
        }
      }
    }
  ],
  "pinData": {
    "On form submission1": [
      {
        "json": {
          "Datum Arbeitstag: ": "2025-09-17",
          "Einsatzort": "Ort",
          "Arbeitsverantwortlicher": "ru",
          "weitere Einsatzkräfte:": "e",
          "Ansprechpartner Kunde: ": "e",
          "Kunde Telefon: ": 444,
          "Ersthelfer vor Ort: ": "d",
          "submittedAt": "2025-09-17T05:40:17.279+02:00",
          "formMode": "production",
          "formQueryParameters": {
            "noGeo": "1"
          }
        }
      }
    ]
  },
  "connections": {
    "Move Binary Data (HTML file)": {
      "main": [
        [
          {
            "node": "HTML → PDF (Gotenberg)1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Form1": {
      "main": [
        [
          {
            "node": "geo-set",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On form submission1": {
      "main": [
        [
          {
            "node": "ryzeup-logo",
            "type": "main",
            "index": 0
          },
          {
            "node": "Bg-logo",
            "type": "main",
            "index": 0
          },
          {
            "node": "pull-query-to-json",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge1",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "Form3": {
      "main": [
        [
          {
            "node": "Get many rows1",
            "type": "main",
            "index": 0
          },
          {
            "node": "OpenWeatherMap1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get many rows1": {
      "main": [
        [
          {
            "node": "harvesine",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenWeatherMap1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "HTML → PDF (Gotenberg)1": {
      "main": [
        [
          {
            "node": "pdf-filename",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "Get row(s) in sheet",
            "type": "main",
            "index": 0
          },
          {
            "node": "data+logos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "header": {
      "main": [
        [
          {
            "node": "footer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "footer": {
      "main": [
        [
          {
            "node": "Move Binary Data (HTML file)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "logo-names": {
      "main": [
        [
          {
            "node": "data+logos",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "pdf-template.js": {
      "main": [
        [
          {
            "node": "header",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ryzeup-logo": {
      "main": [
        [
          {
            "node": "MergeA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "fa-logo": {
      "main": [
        [
          {
            "node": "merge-logos",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "data+logos": {
      "main": [
        [
          {
            "node": "pdf-template.js",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Bg-logo": {
      "main": [
        [
          {
            "node": "MergeA",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "merge-logos": {
      "main": [
        [
          {
            "node": "logo-names",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MergeA": {
      "main": [
        [
          {
            "node": "merge-logos",
            "type": "main",
            "index": 0
          },
          {
            "node": "fa-logo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "pdf-filename": {
      "main": [
        [
          {
            "node": "Send a message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "pull-query-to-json": {
      "main": [
        [
          {
            "node": "Form1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "geo-set": {
      "main": [
        [
          {
            "node": "Form3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "harvesine": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "versionId": "2d242354-c0e3-43d8-ba44-168f04ad8a34",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "2a3eab6b88b8510864f912a25810c5ba12780e3df16b467154212c331aaa0bdb"
  },
  "id": "4AWkG2MF5QOLgIn6",
  "tags": []
}